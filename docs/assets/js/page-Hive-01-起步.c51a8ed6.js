(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{1054:function(e,s,a){"use strict";a.r(s);var n=a(1),v=Object(n.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"数据仓库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据仓库"}},[e._v("#")]),e._v(" 数据仓库")]),e._v(" "),n("p",[n("strong",[e._v("什么是数据仓库")])]),e._v(" "),n("p",[e._v("数据仓库（Data Warehouse），简称 DW，数仓。目的是为了分析数据，提供决策支持的数据存放地点。")]),e._v(" "),n("p",[e._v("数仓本身不产生数据，不消费数据，数据从各种数据源进来，开放给各个外部组件使用。这也是为什么叫做仓库，而不叫工厂的原因。")]),e._v(" "),n("p",[e._v("那么为什么需要数仓而不用传统的数据库呢？因为传统的数据库首先是面向业务，同时要支持增删改查，但是数仓基本不会对数据进行更改和删除，因为数仓是为了发现规律而创造的。")]),e._v(" "),n("p",[n("strong",[e._v("数仓分层")])]),e._v(" "),n("p",[e._v("数仓的特点是不生产数据，也不消费数据。")]),e._v(" "),n("p",[e._v("但是大量的、各种各样的数据源的数据不可能一下子加载进来就可以使用了，有可能有很多多余的字段，我们需要做的其实就是将数据精简再精简，最终剩下有用的部分。")]),e._v(" "),n("p",[e._v("那么为了这个目的，分层就显得尤为重要。")]),e._v(" "),n("p",[e._v("数仓分层每个企业都有自己不同的业务需求，可以根据这个业务需求分为不同的层次，但是最基础的分层是有三个层次：")]),e._v(" "),n("ul",[n("li",[e._v("ODS 层：操作型数据层，这一层的数据其实就是外部数据加载进来，没有什么其他操作。")]),e._v(" "),n("li",[e._v("DW 层：数据仓库层，这一层对 ODS 层中，数据多余的内容（比如字段之类）做了精简，是真正存储有用数据的地方。")]),e._v(" "),n("li",[e._v("DA 层：数据应用层，这一层通常是直接使用的地方，比如使用这些数据直接生成图像、报表等。")])]),e._v(" "),n("p",[e._v("阿里巴巴的数据分层更加细节：")]),e._v(" "),n("p",[n("img",{attrs:{src:a(945),alt:""}})]),e._v(" "),n("p",[e._v("注意的是 DW 层，多出了 DWD、DWB、DWS、DIM 这几层，这几层为不同的业务做了不同的数据支持。")]),e._v(" "),n("p",[e._v("为什么要进行分层：")]),e._v(" "),n("ul",[n("li",[e._v("明确的数据结构：每一个分层都有自己的作用域，在使用表的时候能够更方便地定位和理解。")]),e._v(" "),n("li",[e._v("数据血缘追踪：假如数仓的数据来源有很多，那么假如有一张来源表出了问题，我们希望能够快速定位。")]),e._v(" "),n("li",[e._v("减少重复开发：一些通用的中间数据可以减少重复计算。")]),e._v(" "),n("li",[e._v("复杂问题简单化：每一层处理单一的步骤比较容易理解。")]),e._v(" "),n("li",[e._v("屏蔽原始数据：不需要关注数据源的业务。")])]),e._v(" "),n("p",[n("strong",[e._v("ETL")])]),e._v(" "),n("p",[e._v("之前讲，数仓的数据来源于各个数据源，但是各个数据源的数据结构有可能不一致，所以在从数据源加载到数据仓库的过程中，我们都有：抽取数据源的数据、转换数据格式、加载到数仓。")]),e._v(" "),n("p",[e._v("这三步叫做 ETL，即 "),n("code",[e._v("抽取 Extract")]),e._v("、"),n("code",[e._v("转化 Transfer")]),e._v("、"),n("code",[e._v("加载 Load")]),e._v(" 的过程，但其实在将数据加载到数仓中，并不一定是 ETL，也有可能是 ELT，ELTL 等，根据业务的不同做不同的处理。")]),e._v(" "),n("h2",{attrs:{id:"hive-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hive-概述"}},[e._v("#")]),e._v(" Hive 概述")]),e._v(" "),n("p",[n("strong",[e._v("什么是 Hive")])]),e._v(" "),n("p",[e._v("Hive 是 Facebook 开源的一款数据仓库系统，它可以将存储在 Hadoop 的结构化、半结构化的文件进行映射，形成一张数据库表。")]),e._v(" "),n("p",[e._v("Hive 同时还提供类似 SQL 的查询模型，被称为 HQL（Hive 查询语言），它可以访问和分析 Hadoop 文件中的数据集，其本质是将 HQL 转换为 MapReduce 程序，减少了开发难度，让没有学习过 MapReduce 的程序员也能快速上手。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(946),alt:""}})]),e._v(" "),n("p",[n("strong",[e._v("Hive 组件")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("用户接口：包括 "),n("code",[e._v("CLI（Command Line Interface，命令行）")]),e._v("、"),n("code",[e._v("JDBC/ODBC（JDBC 或 ODBC 协议）")]),e._v("、"),n("code",[e._v("WebGUI（浏览器）")]),e._v("。")])]),e._v(" "),n("li",[n("p",[e._v("元数据存储：一般来说，可以存在 MySQL 或者 Derby 中，但是大部分都会在 MySQL 中，因为 Derby 存在缺陷（下文会提到）。")]),e._v(" "),n("p",[e._v("元数据，就是描述数据的数据，比如说表的名字、表的列、分区属性、所在目录等等。")])]),e._v(" "),n("li",[n("p",[e._v("Driver 驱动程序：包括语法解析器、计划编译器、优化器、执行器。这几个程序会将 HQL 分析，转换为 MapReduce，进行优化，并将查询计划存在 HDFS 中，由执行引擎调用执行。")])]),e._v(" "),n("li",[n("p",[e._v("执行引擎：Hive 本身并不直接处理数据文件，而是通过执行引擎处理。当前 Hive 支持 MapReduce、Tez、Spark 三种执行引擎。")])])]),e._v(" "),n("p",[n("strong",[e._v("数据模型")])]),e._v(" "),n("p",[e._v("Hive 的数据模型可以用来描述数据、组织数据、对数据进行操作，是现实世界数据特征的描述。类似于 RDBMS 库表结构，不过也不尽相同。")]),e._v(" "),n("p",[e._v("Hive 中的数据可以在粒度上分为三类：")]),e._v(" "),n("ul",[n("li",[e._v("Table：最粗粒度，表。")]),e._v(" "),n("li",[e._v("Partition：中等粒度，分区。")]),e._v(" "),n("li",[e._v("Bucket：最细粒度，分桶。")])]),e._v(" "),n("p",[e._v("其实比较好理解，Table 可以包含多个 Partition，Partition 可以包含多个 Bucket。可以对比一下阿里云 OSS，OSS 在进行对象存储时也需要分地区存储，然后创建多个 bucket。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(947),alt:""}})]),e._v(" "),n("p",[n("strong",[e._v("Databases")])]),e._v(" "),n("p",[e._v("Hive 的外在表现十分像一个数据库，在结构上也会分数据库（schema），默认使用的 schema 是 default。")]),e._v(" "),n("p",[e._v("虽然 Hive 外在像数据库，但其实数据是存储在存储系统中的。")]),e._v(" "),n("p",[e._v("我们以 HDFS 为例，它有一个默认的根目录，可以在 "),n("code",[e._v("hive-site.xml")]),e._v(" 中查看，由 "),n("code",[e._v("hive.metastore.warehouse.dir")]),e._v(" 指定，默认为 "),n("code",[e._v("/user/hive/warehouse")]),e._v("，所以 Hive 在 HDFS 中的存储路径为："),n("code",[e._v("${hive.metastore.warehouse.dir}/${databaseName}.db")]),e._v("。")]),e._v(" "),n("p",[n("strong",[e._v("Tables")])]),e._v(" "),n("p",[e._v("Hive 表和关系型数据库的表相同，Hive 中的表所对应的数据是存储在 Hadoop 的文件系统中，而表相关的元数据是存储在 RDBMS 中。")]),e._v(" "),n("p",[e._v("Hive 其实本质上分为两种表：内部表、外部表。两种表的区别在下文中会提到。Hive 表在 HDFS 上的存储路径为："),n("code",[e._v("${hive.metastore.warehouse.dir}/${databaseName}/${tableName}")])]),e._v(" "),n("p",[n("strong",[e._v("Partition")])]),e._v(" "),n("p",[e._v("其实本质来讲，分区是一种优化手段，不同分区的数据在 HDFS 上本质会存储到不同的文件夹中。")]),e._v(" "),n("p",[e._v("假如有一百万条会员的信息，假如我们按照年龄每 10 岁一个分区，那么假如我们想要查询 25 岁的人群就可以到对应的文件夹中查找，而不需要遍历所有文件。")]),e._v(" "),n("p",[e._v("Hive 分区在 HDFS 上的存储路径为："),n("code",[e._v("${hive.metastore.warehouse.dir}/${databaseName}/${tableName}/${partition}")]),e._v("。")]),e._v(" "),n("p",[e._v("说明一下，最后的 partition 文件夹的命名规则是："),n("code",[e._v("分区列=分区值")]),e._v("，比如我按照日期进行分区，那么有可能会出现一个文件夹叫做 "),n("code",[e._v("day=20220126")])]),e._v(" "),n("p",[n("strong",[e._v("Bucket")])]),e._v(" "),n("p",[e._v("Bucket，分桶，本质上也是一种 Hive 的优化手段。")]),e._v(" "),n("p",[e._v("分桶在分区的规则上，可以进行更细粒度的划分，但是这次的划分不是划分成为文件夹，而是分成一个个的小文件，这样查询的数据就只需要查询指定的文件即可。")]),e._v(" "),n("p",[n("strong",[e._v("Hive 和 MySQL")])]),e._v(" "),n("p",[e._v("首先讲一点，Hive 本质上不是数据库，也不能取代 MySQL。Hive 的使用场景是离线数据分析，而 MySQL 是数据的业务处理。")]),e._v(" "),n("p",[e._v("在 Hive 中执行数据分析，数据量是极大的，分析几小时甚至几天出结果都是很正常的，但是 MySQL 往往要求实时性。")]),e._v(" "),n("p",[e._v("Hive 基本不会已有数据进行增删改，但是 MySQL 是必然的。")]),e._v(" "),n("h2",{attrs:{id:"hive-安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hive-安装"}},[e._v("#")]),e._v(" Hive 安装")]),e._v(" "),n("h3",{attrs:{id:"安装、部署、使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装、部署、使用"}},[e._v("#")]),e._v(" 安装、部署、使用")]),e._v(" "),n("p",[n("strong",[e._v("Metastore")])]),e._v(" "),n("p",[e._v("在 Hive 中，存在元数据服务，也就是 Metastore，元数据我们之前提过，描述数据的数据，比如表的存放位置、表的名字等。")]),e._v(" "),n("p",[e._v("Metastore 服务作用是管理元数据 metastore，对外暴露地址，可以让多个客户端链接 metastore 服务间接去存取元数据，一定程度上保证了 Hive 元数据的安全。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(948),alt:""}})]),e._v(" "),n("hr"),e._v(" "),n("p",[n("strong",[e._v("安装")])]),e._v(" "),n("ol",[n("li",[n("p",[e._v("首先要安装 MySQL 内容，在此之前先看一下服务器中是否含有 MySQL，有则卸载："),n("code",[e._v("rpm -qa | grep -E mysql\\|mariadb | xargs -n1 sudo rpm -e --nodeps")])]),e._v(" "),n("p",[n("code",[e._v("rpm -qa")]),e._v("：查询 rpm 包。\n"),n("code",[e._v("mysql")]),e._v("、"),n("code",[e._v("mariadb")]),e._v(" 都是 MySQL，不同版本而已。\n"),n("code",[e._v("xxx | xargs -n1")]),e._v("：前面的内容通过管道符作为参数，一个一个地传递给后面的命令")])]),e._v(" "),n("li",[n("p",[e._v("使用 MySQL 安装包，解压 tar 包："),n("code",[e._v("tar -xf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar -C /opt/software/mysql")])])]),e._v(" "),n("li",[n("p",[e._v("进入到 mysql 目录中，按照如下次序依次进行安装：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm\nsudo rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])])]),e._v(" "),n("li",[n("p",[e._v("初始化数据库："),n("code",[e._v("sudo mysqld --initialize --user=mysql")])])]),e._v(" "),n("li",[n("p",[e._v("查看生成的 root 密码："),n("code",[e._v("cat /var/log/mysqld.log")]),e._v("，其中有一行叫做 "),n("code",[e._v("A temprary is generated for xxxx")]),e._v(" 的就是密码。")])]),e._v(" "),n("li",[n("p",[e._v("启动 MySQL："),n("code",[e._v("sudo systemctl start mysqld")])])]),e._v(" "),n("li",[n("p",[e._v("登录 MySQL，修改 root 的新密码："),n("code",[e._v('set password = password("新密码")')]),e._v("。")])]),e._v(" "),n("li",[n("p",[e._v("修改 MySQL 的 root 用户为任何 ip 可连接："),n("code",[e._v("update mysql.user set host='%' where user='root';")])])]),e._v(" "),n("li",[n("p",[e._v("刷新："),n("code",[e._v("flush privileges;")])])])]),e._v(" "),n("p",[e._v("至此，MySQL 安装完毕。")]),e._v(" "),n("hr"),e._v(" "),n("ol",[n("li",[n("p",[e._v("Hive 的安装比较简单，首先解压包到对应目录下。")])]),e._v(" "),n("li",[n("p",[e._v("之后修改环境变量：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# HIVE_HOME\nexport HIVE_HOME=/opt/module/hive\nexport PATH=$PATH:$HIVE_HOME/bin\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])])]),e._v(" "),n("li",[n("p",[e._v("Hive 和 Hadoop 的日志包冲突了，解决 jar 包冲突："),n("code",[e._v("rm $HIVE_HOME/lib/log4j-slf4j-impl-2.10.0.jar")]),e._v("，让 Hive 去寻找 Hadoop 的 jar。")])]),e._v(" "),n("li",[n("p",[e._v("拷贝 JDBC 驱动到 Hive 的 lib 下："),n("code",[e._v("cp /op/software/mysql/mysql-connector-java-5.1.48.jar $HIVE_HOME/lib")])])]),e._v(" "),n("li",[n("p",[e._v("配置 metastore 到 MySQL，在 $HIVE_HOME/conf 下面新建文件 "),n("code",[e._v("hive-site.xml")]),e._v("：")]),e._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[e._v("配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<configuration>\n    \x3c!-- jdbc连接的URL --\x3e\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value>jdbc:mysql://hadoop102:3306/metastore?useSSL=false</value>\n    </property>\n\n    \x3c!-- jdbc连接的Driver--\x3e\n    <property>\n        <name>javax.jdo.option.ConnectionDriverName</name>\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n\n    \x3c!-- jdbc连接的username--\x3e\n    <property>\n        <name>javax.jdo.option.ConnectionUserName</name>\n        <value>root</value>\n    </property>\n\n    \x3c!-- jdbc连接的password --\x3e\n    <property>\n        <name>javax.jdo.option.ConnectionPassword</name>\n        <value>123456</value>\n    </property>\n\n    \x3c!-- Hive默认在HDFS的工作目录 --\x3e\n    <property>\n        <name>hive.metastore.warehouse.dir</name>\n        <value>/user/hive/warehouse</value>\n    </property>\n\n    \x3c!-- Hive元数据存储的验证 --\x3e\n    <property>\n        <name>hive.metastore.schema.verification</name>\n        <value>false</value>\n    </property>\n\n    \x3c!-- 元数据存储授权  --\x3e\n    <property>\n        <name>hive.metastore.event.db.notification.api.auth</name>\n        <value>false</value>\n    </property>\n\n    \x3c!-- 指定存储元数据要连接的地址 --\x3e\n    <property>\n        <name>hive.metastore.uris</name>\n        <value>thrift://hadoop102:9083</value>\n    </property>\n\n    \x3c!-- 指定hiveserver2连接的host --\x3e\n    <property>\n        <name>hive.server2.thrift.bind.host</name>\n        <value>hadoop102</value>\n    </property>\n\n    \x3c!-- 指定hiveserver2连接的端口号 --\x3e\n    <property>\n        <name>hive.server2.thrift.port</name>\n        <value>10000</value>\n    </property>\n\n    \x3c!-- 配置运行 hiveserver2 的用户登入 --\x3e\n    <property>\n        <name>hive.server2.thrift.port</name>\n        <value>10000</value>\n    </property>\n\n    \x3c!-- 配置当前运行 hiveserver2 的用户有权限连接 --\x3e\n    <property>\n        <name>hive.server2.enable.doAs</name>\n        <value>false</value>\n    </property>\n\n    \x3c!-- 打印表头 --\x3e\n    <property>\n        <name>hive.cli.print.header</name>\n        <value>true</value>\n    </property>\n\n    \x3c!-- 打印库名称 --\x3e\n    <property>\n        <name>hive.cli.print.current.db</name>\n        <value>true</value>\n    </property>\n\n</configuration>\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br")])])])])]),e._v(" "),n("p",[e._v("至此，Hive 配置完成。")]),e._v(" "),n("hr"),e._v(" "),n("h3",{attrs:{id:"hive-的启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hive-的启动"}},[e._v("#")]),e._v(" Hive 的启动")]),e._v(" "),n("p",[e._v("之前我们讲过元数据，那么 Hive Metadata 就是 Hive 的元数据，它包含在关系型数据库中，之后就会放到我们刚刚安装的 MySQL 中。")]),e._v(" "),n("p",[e._v("Metastore 即元数据服务，元数据服务的作用是管理 metadata 元数据，对外暴露服务地址，让客户端通过连接 metastore 服务连接 MySQL，进而存取元数据。")]),e._v(" "),n("p",[e._v("有了 metastore 服务，就可以多个客户端进行连接，这些客户端不需要知道用户名和密码，只需要连接 metastore 服务即可。某种程度上也保证了元数据的安全。")]),e._v(" "),n("p",[e._v("metastore 服务有三种模式：内嵌、本地、远程。区分三种方式主要在于两点：metastore 是否需要单独启动、metadata 是存放到内置的 derby 中还是第三方的关系型数据库（如 MySQL）。")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("x")]),e._v(" "),n("th",[e._v("内嵌模式")]),e._v(" "),n("th",[e._v("本地模式")]),e._v(" "),n("th",[e._v("远程模式")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("metastore 服务是否单独配置")]),e._v(" "),n("td",[e._v("否")]),e._v(" "),n("td",[e._v("否")]),e._v(" "),n("td",[e._v("是")])]),e._v(" "),n("tr",[n("td",[e._v("metadata 的存储介质")]),e._v(" "),n("td",[e._v("内置的 derby")]),e._v(" "),n("td",[e._v("mysql")]),e._v(" "),n("td",[e._v("mysql")])])])]),e._v(" "),n("p",[e._v("那么我们之前所做的内容就是让 metastore 服务单独启动、metadata 放到 MySQL 中的，那么这就是远程模式。")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("内嵌模式下，元数据存储在内置的 derby 中，这种情况下，一次仅支持一个用户，不适合生产环境。不做讲解。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(949),alt:""}})]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("本地模式下，外部数据库存储元数据，但是 metastore 也不需要单独配置，比内嵌模式好些，支持多个用户，但是问题是每次启动一次 hive 服务，都内置启动一个 metastore 服务。")]),e._v(" "),n("p",[e._v("启动本地模式只需要使用 "),n("code",[e._v("bin/hive")]),e._v(" 便可以一键启动。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(950),alt:""}})]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("远程模式下，metastore 需要单独启动，元数据也需要放到第三方的关系型数据库。")]),e._v(" "),n("p",[e._v("在远程模式下，我们也可以采用 hiveserver2 这个服务来访问 metastore，进而访问 hive 元数据，也就是在原本的 metastore 基础上再次做了一层封装，这样做的好处就是可以完全屏蔽掉数据层，带来更高的安全性和可靠性。")]),e._v(" "),n("p",[e._v("首先进入 MySQL，新建 "),n("code",[e._v("metadata")]),e._v(" 库："),n("code",[e._v("create database metastore;")])]),e._v(" "),n("p",[e._v("之后初始化 Hive 元数据库："),n("code",[e._v("schematool -initSchema -dbType mysql -verbose")])]),e._v(" "),n("p",[e._v("启动了 hiveserver2 之后，我们可以使用 beelin 来通过 JDBC 连接 hiveserver2 服务：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("启动 metastore："),n("code",[e._v("bin/hive --service metastore")])])]),e._v(" "),n("li",[n("p",[e._v("启动 hiveserver2："),n("code",[e._v("bin/hive --service hiveserver2")])])]),e._v(" "),n("li",[n("p",[e._v("启动 beeline 客户端："),n("code",[e._v("bin/beeline -u jdbc:hive2://hadoop102:10000 -n atguigu")])]),e._v(" "),n("p",[e._v("这里注意，因为我们在配置中配置了 "),n("code",[e._v("hive.server2.enable.doAs")]),e._v("，所以这里的 "),n("code",[e._v("atguigu")]),e._v(" 是你启动 hiveserver2 的用户")]),e._v(" "),n("p",[e._v("并且需要注意的是，hiveserver2 并不会立刻启动，如果连接不上可能是因为服务没有启动，可以通过 "),n("code",[e._v("sudo netstat -anp | grep 10000")]),e._v(" 查看 hiveserver2 是否在这个端口中启动了。")])])]),e._v(" "),n("p",[n("img",{attrs:{src:a(951),alt:""}})]),e._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[e._v("发展史")]),e._v(" "),n("p",[e._v("Hive 发展至今，一共经历了两代客户端工具，第一代客户都安是 "),n("code",[e._v("bin/hive")]),e._v("，他是一个 shell util，可以处理 hive 查询，也可以启动 hive 相关的服务。")]),e._v(" "),n("p",[e._v("到目前为止，我们一般只需要利用它来启动 hive 相关的服务。")]),e._v(" "),n("p",[e._v("第二代客户端是 beeline，它是一个 JDBC 客户端，性能和安全性比第一代有提高，所以我们现在一般使用这个。")])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("再次梳理一下 hive 几个服务和客户端之间的关系：")]),e._v(" "),n("p",[e._v("hiveserver2 会通过 metastore 服务读写元数据，所以启动 hiveserver2 之前需要启动 metastore 服务。")]),e._v(" "),n("p",[e._v("beeline 客户端通过操纵 hiveserver2 去操作 metastore，进而操作元数据。")]),e._v(" "),n("p",[e._v("第一代客户端 hive 会直接操作 metastore，进而操作元数据。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(952),alt:""}})]),e._v(" "),n("hr"),e._v(" "),n("h3",{attrs:{id:"脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚本"}},[e._v("#")]),e._v(" 脚本")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("编写脚本 "),n("code",[e._v("$HIVE_HOME/bin/hiveservices.sh")])]),e._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[e._v("脚本")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#!/bin/bash\nHIVE_LOG_DIR=$HIVE_HOME/logs\nif [ ! -d $HIVE_LOG_DIR ]\nthen\n    mkdir -p $HIVE_LOG_DIR\nfi\n#检查进程是否运行正常，参数 1 为进程名，参数 2 为进程端口\nfunction check_process()\n{\n    pid=$(ps -ef 2>/dev/null | grep -v grep | grep -i $1 | awk \'{print $2}\')\n    ppid=$(netstat -nltp 2>/dev/null | grep $2 | awk \'{print $7}\' | cut -d \'/\' -f 1)\n    echo $pid\n    [[ "$pid" =~ "$ppid" ]] && [ "$ppid" ] && return 0 || return 1\n}\n\nfunction hive_start()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    cmd="nohup hive --service metastore >$HIVE_LOG_DIR/metastore.log 2>&1 &"\n    cmd=$cmd" sleep 4; hdfs dfsadmin -safemode wait >/dev/null 2>&1"\n    [ -z "$metapid" ] && eval $cmd || echo "Metastroe服务已启动"\n    server2pid=$(check_process HiveServer2 10000)\n    cmd="nohup hive --service hiveserver2 >$HIVE_LOG_DIR/hiveServer2.log 2>&1 &"\n    [ -z "$server2pid" ] && eval $cmd || echo "HiveServer2服务已启动"\n}\n\nfunction hive_stop()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    [ "$metapid" ] && kill $metapid || echo "Metastore服务未启动"\n    server2pid=$(check_process HiveServer2 10000)\n    [ "$server2pid" ] && kill $server2pid || echo "HiveServer2服务未启动"\n}\n\ncase $1 in\n"start")\n    hive_start\n    ;;\n"stop")\n    hive_stop\n    ;;\n"restart")\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n"status")\n    check_process HiveMetastore 9083 >/dev/null && echo "Metastore服务运行正常" || echo "Metastore服务运行异常"\n    check_process HiveServer2 10000 >/dev/null && echo "HiveServer2服务运行正常" || echo "HiveServer2服务运行异常"\n    ;;\n*)\n    echo Invalid Args!\n    echo \'Usage: \'$(basename $0)\' start|stop|restart|status\'\n    ;;\nesac\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br")])])]),e._v(" "),n("p",[e._v("shell 命令："),n("code",[e._v("nohup [命令]> file 2>&1 &")])]),e._v(" "),n("p",[n("code",[e._v("nohup")]),e._v(" 表示不挂起（关闭终端继续运行），"),n("code",[e._v("&")]),e._v(" 代表后台运行，"),n("code",[e._v("2")]),e._v(" 代表错误输出，"),n("code",[e._v("1")]),e._v(" 代表标准输出，"),n("code",[e._v("0")]),e._v(" 代表标准输入。"),n("code",[e._v("2>&1")]),e._v(" 代表错误重定向到标准输出上。")])]),e._v(" "),n("li",[n("p",[e._v("添加执行权限："),n("code",[e._v("chmod u+x $HIVE_HOME/bin/hiveservices.sh")])])])]),e._v(" "),n("hr"),e._v(" "),n("h3",{attrs:{id:"日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[e._v("#")]),e._v(" 日志")]),e._v(" "),n("p",[e._v("Hive 的日志默认放在 "),n("code",[e._v("/tmp/${user}/hive.log")]),e._v(" 下（当前用户名下），修改日志位置到 "),n("code",[e._v("$HIVE_HOME/logs")]),e._v(" 下：")]),e._v(" "),n("ol",[n("li",[e._v("修改 "),n("code",[e._v("$HIVE_HOME/conf/hive-log4j2.properties.template")]),e._v(" 名称为 "),n("code",[e._v("hive-log4j2.properties")])]),e._v(" "),n("li",[e._v("修改配置 "),n("code",[e._v("property.hive.log.dir=/opt/module/apache-hive-3.1.2-bin/logs")])])]),e._v(" "),n("h3",{attrs:{id:"参数配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数配置"}},[e._v("#")]),e._v(" 参数配置")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("进入 hive 之后，可以使用 "),n("code",[e._v("set;")]),e._v(" 查看配置信息。")])]),e._v(" "),n("li",[n("p",[e._v("hive 有三种配置方式：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("配置文件：")]),e._v(" "),n("ul",[n("li",[e._v("默认配置文件："),n("code",[e._v("hive-default.xml")]),e._v("。")]),e._v(" "),n("li",[e._v("用户自定义配置："),n("code",[e._v("hive-site.xml")]),e._v("，它将会覆盖默认配置文件。")])])]),e._v(" "),n("li",[n("p",[e._v("命令行参数：")]),e._v(" "),n("p",[e._v("启动 hive 的时候，可以添加 "),n("code",[e._v("hiveconf param=value")]),e._v("，但是这种方式只会在此次 hive 会话中生效。")])]),e._v(" "),n("li",[n("p",[e._v("参数声明设置：")]),e._v(" "),n("p",[e._v("在 HQL（Hive SQL，之后需要学到的内容） 中，使用 "),n("code",[e._v("set xxx")]),e._v(" 设置，也是对本次 hive 会话中生效。")])])])])])])}),[],!1,null,null,null);s.default=v.exports},945:function(e,s,a){e.exports=a.p+"assets/img/2022-01-26-09-48-22.49531590.png"},946:function(e,s,a){e.exports=a.p+"assets/img/2022-01-26-10-01-12.2eff1ced.png"},947:function(e,s,a){e.exports=a.p+"assets/img/2022-01-26-17-08-58.eee08aaf.png"},948:function(e,s,a){e.exports=a.p+"assets/img/2022-01-26-17-29-44.3c04a832.png"},949:function(e,s,a){e.exports=a.p+"assets/img/2022-02-23-22-33-47.4183c415.png"},950:function(e,s,a){e.exports=a.p+"assets/img/2022-02-23-22-35-10.e8467270.png"},951:function(e,s,a){e.exports=a.p+"assets/img/2022-02-23-22-37-25.15fe9bd3.png"},952:function(e,s,a){e.exports=a.p+"assets/img/2022-02-23-22-47-32.a4629f50.png"}}]);